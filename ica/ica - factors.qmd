---
title: "ica - factors"
format: html
---

##Example 1: Default Order. 
#Data on presidential election outcomes in each U.S. county (except those in Alaska):
```{r}
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv") |> 
  select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |> 
  mutate(dem_support_20 = case_when(
    (repub_pct_20 - dem_pct_20 >= 5) ~ "low",
    (repub_pct_20 - dem_pct_20 <= -5) ~ "high",
    .default = "medium"
  ))

# Check it out
head(elections)  
```

#Check out the below visual and numerical summaries of dem_support_20
```{r}
ggplot(elections, aes(x = dem_support_20)) + 
  geom_bar()
```
```{r}
elections |> 
  count(dem_support_20)
```

##Example 2: Change Order using fct_relevel
#The above categories of dem_support_20 are listed alphabetically, which isn’t particularly meaningful here. This is because dem_support_20 is a character variable and R thinks of character strings as words, not category labels with any meaningful order (other than alphabetical):
```{r}
str(elections)
```
#We can fix this by using fct_relevel() to both. Store dem_support_20 as a factor variable, the levels of which are recognized as specific levels or categories, not just words.Specify a meaningful order for the levels of the factor variable.
```{r}
# Notice that the order of the levels is not alphabetical!
elections <- elections |> 
  mutate(dem_support_20 = fct_relevel(dem_support_20, c("low", "medium", "high")))

# Notice the new structure of the dem_support_20 variable
str(elections)
```

```{r}
# And plot dem_support_20
ggplot(elections, aes(x = dem_support_20)) +
  geom_bar()
```

##Example 3: Change Labels using fct_recode.
#We now have a factor variable, dem_support_20, with categories that are ordered in a meaningful way:
```{r}
elections |> 
  count(dem_support_20)
```

#But maybe we want to change up the category labels. For demo purposes, let’s create a new factor variable, results_20, that’s the same as dem_support_20 but with different category labels:
```{r}
# We can redefine any number of the category labels.
# Here we'll relabel all 3 categories:
elections <- elections |> 
  mutate(results_20 = fct_recode(dem_support_20, 
                                 "strong republican" = "low",
                                 "close race" = "medium",
                                 "strong democrat" = "high"))

# Check it out
# Note that the new category labels are still in a meaningful, not necessarily alphabetical, order!
elections |> 
  count(results_20)
```

#Example 4: Re-order Levels using fct_relevel. Finally, let’s explore how the Republican vote varied from county to county within each state:
```{r}
# Note that we're just piping the data into ggplot instead of writing it as the first argument
elections |> 
  ggplot(aes(x = repub_pct_20, fill = state_abbr)) + 
    geom_density(alpha = 0.5)
```
#joy plot/ridge plot:
```{r}
library(ggridges)
elections |> 
  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + 
    geom_density_ridges() + 
    scale_fill_manual(values = c("blue", "purple", "red"))
```
#Example 5: Re-order levels Based on Another Variable using fct_reorder
```{r}
# Since we might want states to be alphabetical in other parts of our analysis, we'll pipe the data into the ggplot without storing it:
elections |> 
  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = "median")) |> 
  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + 
    geom_density_ridges() + 
    scale_fill_manual(values = c("blue", "purple", "red"))
```

```{r}
# How did the code change?
# And the corresponding output?
elections |> 
  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = "median", .desc = TRUE)) |> 
  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + 
    geom_density_ridges() + 
    scale_fill_manual(values = c("blue", "purple", "red"))
```

###EXERCISES
```{r}
# Get rid of some duplicate rows!
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)

# Check it out
head(grades)

grade_distribution <- grades |> 
  count(grade)

head(grade_distribution)
```
#Exercise 1: Changing Order
#Check out a column plot of the number of times each grade was assigned during the study period. This is similar to a bar plot, but where we define the height of a bar according to variable in our dataset.
```{r}
grade_distribution |> 
  ggplot(aes(x = grade, y = n)) +
    geom_col()
```


#The order of the grades is goofy! Construct a new column plot, manually reordering the grades from high (A) to low (NC) with “S” and “AU” at the end:
```{r}
#grade_distribution |>
#    mutate(grade = ___(___, c("A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "S", "AU"))) |>
#   ggplot(aes(x = grade, y = n)) +
#     geom_col()
```




