[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT112 Notebook",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "bw/bw-uni.html",
    "href": "bw/bw-uni.html",
    "title": "\n1  Univariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking univariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\n# Load the package\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Import data\nhikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n\n\n #| fig-cap: Moderate hikes are the most common, easy hikes are the second most common, and difficult hikes are the least common. By Maria Benito Correa, updated Febrauray 21, 2025. Data source: https://mac-stat.github.io/data \n #| fig-alt:This is a bar chart of hikes with three different ratings. Ratings are on the x-axis and number of hikes is on the y axis. In order from left to right, the bars are difficult, easy, and moderate. There are around 8 hikes rated difficult. There are aroun 11 hikes rated easy. There are around 27 hikes rated moderate. \n \nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"purple\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\", title = \"Ratings of Hikes\", subtitle = \"How many hikes are easy, moderate, or difficult?\") +\n  theme_minimal() + \n  scale_fill_viridis_d()+\n  theme(axis.text.x = element_text(size=16), axis.text.y = element_text(size=16))",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html",
    "href": "bw/bw-bi.html",
    "title": "\n2  Bivariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking bivariate visualization. The visualization will not perfect the first time but you are expected to improve it throughout the semester especially after covering advanced topics such as effective viz.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Import data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))  \n\n\n#create sub data set for only Wollongong location\nwoll &lt;- weather |&gt;\n  filter(location == \"Wollongong\") |&gt; \n  mutate(date = as.Date(date))  \n\n\n# Proportional bars\n# position = \"fill\" refers to filling the frame, nothing to do with the color-related fill\n#| fig-cap: For days that it doens't rain today, there are less days where it doens't rain tomorrow. For  days where it does rain today, there are more days where it does rain tomorrow. \n#| fig-alt: This is bar chart with the x axis being 'rain today' and the yaxis being 'count'. There are three bars -- yes, no and NA, for the rain today variable. The bars are divided into different colors based on the proportion of days that it rains tomorrow. The bar for 'no' rain today, has roughly 20% of corresponding data points that say that it will rain tomorrow, and roughly 80% of corresponding data points that say that it will not rain tomorrow. The bar for 'yes' rain today has 50% of corresponding data points that say it will rain tomorrow, and 50% of corresponding data points that say it will not rain tomorrow. The third column, 'NA' for rain today, has 12.5% of correesponding corresponding data points that say it will not rain tomorrow and about 5% of corresponding data points that say it will rain tomorrow.\n\n\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\") +\n   labs(x = \"Rating\", y = \"Proportion\", title = \"Rain Tomorrow vs Rain Today\", subtitle = \"How does rain today correlate to rain tomorrow?\") +\n  scale_fill_viridis_d()  \n\n\n\n\n\n\nlabs(x = \"Rating\", y = \"Number of hikes\", title = \"Ratings of Hikes\", subtitle = \"How many hikes are easy, moderate, or difficult?\") \n\n$x\n[1] \"Rating\"\n\n$y\n[1] \"Number of hikes\"\n\n$title\n[1] \"Ratings of Hikes\"\n\n$subtitle\n[1] \"How many hikes are easy, moderate, or difficult?\"\n\nattr(,\"class\")\n[1] \"labels\"",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html",
    "href": "bw/bw-tri.html",
    "title": "\n3  Trivariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking trivariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n#This visulization is from HW2.\n\n# Load packages we'll need: tidyverse, mosaic, fivethirtyeight (mosaicData will be loaded automatically when loading the mosaic package)'\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(fivethirtyeight)\n\nSome larger datasets need to be installed separately, like senators and\nhouse_district_forecast. To install these, we recommend you install the\nfivethirtyeightdata package by running:\ninstall.packages('fivethirtyeightdata', repos =\n'https://fivethirtyeightdata.github.io/drat/', type = 'source')\n\n\n\n# Create the daily_births dataset\ndata(\"Birthdays\")\ndaily_births &lt;- Birthdays |&gt; \n  group_by(date) |&gt; \n  summarize(births = sum(births)) |&gt; \n  mutate(year = year(date), \n         month = month(date, label = TRUE),\n         day_of_month = mday(date),\n         day_of_week = wday(date, label = TRUE))\n\n\n#Construct a plot of births over time. \n #| fig-cap: Births per day dip from about 1971 to 1975, and rise slightly from 1976 onwards. There tend to be really low births in the months January - April. Highest numbers of births tend to happen August - November. By Maria Benito, updated Febraury 19, 2025. Data source: https://github.com/fivethirtyeight/data/tree/master/births\n #| fig-alt: This is a scatter plot of year (1969 - 1991) vs births. Daily births dip from about 1971 to 1975, and rise slightly from 1976 onwards. They dip from about 11,500 births per day to 10,1000 births per day and then rise steadily until the last year we have data for, 1961, where daily births are around 13,000.\n\n\nggplot(daily_births, aes(y = births, x = year, color = month)) +\n  geom_point() +\n  labs(x = \"Year\", y = \"Births per Day\", title = \"Births per Day vs Year\", subtitle = \"How Births per Day Differ Across Months Over Several Years\") +\n   scale_fill_viridis_d()  +\n    theme(axis.text.x = element_text(size=16), axis.text.y = element_text(size=16))",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-quad.html",
    "href": "bw/bw-quad.html",
    "title": "\n4  Quadvariate Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking quadvariate visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n# Import data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))  \n\n\n #| fig-cap: For all three locations in Austrailia, there is a positive relationship between temperature at 9am and temperature at 3pm. This relationship is steeper on days where it rains. \n \n #| fig-alt: This is a faceted scatter plot where the x axis is temperature at 9am and the y axis is temperature at 3pm. Each facet represents wheather or not it rained today -- the leftmost facet is for the days it didn't rain, the next facet is for the days it did rain, and the last facet is for days where the rain data is not avaialable. The dots of the scatter plot are color coded by location: Hobart, Uluru, and Wollongong. For all three locations, there is a positive relationship between temperature at 9am and temperature at 3pm. This relationship is steeper on days where it rains. \n\n\n  \nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() +\n  facet_wrap(~ raintoday) +\n  scale_color_viridis_d()+\nlabs(x = \"Temperature at 9a.m.\", y = \"Temperature at 3p.m.\", title = \"Temperature at 3p.m. vs Temperature at 9a.m.\", subtitle = \"How do daily temperatures vary by location?\")\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quadvariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html",
    "href": "bw/bw-spatial.html",
    "title": "\n5  Spatial Viz\n",
    "section": "",
    "text": "Use this file to generate a professional looking spatial visualization. The visualization will not perfect the first time but you are expected to improve on it throughout the semester especially after covering advanced topics such as effective viz.\n#This visulization is from HW3.\n\n# Load package needed to change color\nlibrary(gplots) \n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\n# Load the leaflet package\nlibrary(leaflet)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\n#Make favorite places data set\nfavorite_place &lt;- tribble(\n  ~place, ~longitude, ~latitude, ~favorite,\n  \"Lake Harriet\", 44.928851856625954, -93.3076662863296, \"yes\",\n  \"Georgetown\", 38.9097, -77.0654, \"yes\",\n  \"Southdale Library\", 44.8756, -93.32008, \"yes\",\n  \"Macalester College\", 44.9379, -93.1685, \"no\",\n  \"Stone Arch Bridge\", 44.9807, -93.2537, \"no\",\n  \"Downtown Minneapolis\", 44.9765, -93.2761, \"no\",\n  \"Linden Hills Library\", 44.92515, -93.3165, \"no\",\n  \"Barnes & Noble\", 44.877578, -93.32384, \"no\"\n)\n\n\n #| fig-cap: This is a map of my favorite places, most of which are in Minneapolis, Minneosta and St. Paul, Minnesota. By Maria Benito, updated on February 19, 2025. Data source: created by myself.\n #| fig-alt: This is a world map which can be zoomed in to see my favorite locations. My favorite locations are marked by a red circle and are: Georgetown in Washington D.C.; Southdale Library, Linden Hills Library, Barnes and Noble, and Lake Harriet in Minneapolis, MN.; Macalester Colelge, in St. Paul, MN. Minneapolis and St. Paul are very close to eachother, and Washington D.C. is east of them and very far away.\n# Just a plotting frame\nleaflet(data = favorite_place)\n\n\n\n\n# longitude and latitude refer to the variables in our data\nleaflet(data = favorite_place) |&gt; \n  addTiles() |&gt; \n  addMarkers(lng = ~latitude, lat = ~longitude)\n\n\n\n\n# Since we named them \"longitude\" and \"latitude\", the function\n# automatically recognizes these variables. No need to write them!\nleaflet(data = favorite_place) |&gt; \n  addTiles() |&gt; \n  addMarkers()\n\nAssuming \"longitude\" and \"latitude\" are longitude and latitude, respectively\n\n\n\n\n\n# We can add colored circles instead of markers at each location\nleaflet(data = favorite_place) |&gt; \n  addTiles() |&gt; \n  addCircles(color = col2hex(\"red\"), label = ~place, lng = ~latitude, lat = ~longitude)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html",
    "href": "ica/ica-uni.html",
    "title": "6  Univariate Viz",
    "section": "",
    "text": "Use this file for practice with the univariate viz in-class activity. Refer to the class website for details.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html",
    "href": "ica/ica-bi.html",
    "title": "\n7  Bivariate Viz\n",
    "section": "",
    "text": "Use this file for practice with the bivariate viz in-class activity. Refer to the class website for details.\n\nlibrary(ggplot2)\n\n\n# Load data\nelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\n# Check it out\nhead(elections)\n\n  state_name state_abbr historical    county_name county_fips total_votes_20\n1    Alabama         AL        red Autauga County        1001          27770\n2    Alabama         AL        red Baldwin County        1003         109679\n3    Alabama         AL        red Barbour County        1005          10518\n4    Alabama         AL        red    Bibb County        1007           9595\n5    Alabama         AL        red  Blount County        1009          27588\n6    Alabama         AL        red Bullock County        1011           4613\n  repub_pct_20 dem_pct_20 winner_20 total_votes_16 repub_pct_16 dem_pct_16\n1        71.44      27.02     repub          24661        73.44      23.96\n2        76.17      22.41     repub          94090        77.35      19.57\n3        53.45      45.79     repub          10390        52.27      46.66\n4        78.43      20.70     repub           8748        76.97      21.42\n5        89.57       9.57     repub          25384        89.85       8.47\n6        24.84      74.70       dem           4701        24.23      75.09\n  winner_16 total_votes_12 repub_pct_12 dem_pct_12 winner_12 total_population\n1     repub          23909        72.63      26.58     repub            54907\n2     repub          84988        77.39      21.57     repub           187114\n3     repub          11459        48.34      51.25       dem            27321\n4     repub           8391        73.07      26.22     repub            22754\n5     repub          23980        86.49      12.35     repub            57623\n6       dem           5318        23.51      76.31       dem            10746\n  percent_white percent_black percent_asian percent_hispanic per_capita_income\n1            76            18             1                2             24571\n2            83             9             1                4             26766\n3            46            46             0                5             16829\n4            75            22             0                2             17427\n5            88             1             0                8             20730\n6            22            71             0                6             18628\n  median_rent median_age\n1         668       37.5\n2         693       41.5\n3         382       38.3\n4         351       39.4\n5         403       39.6\n6         276       39.6\n\n\n##Exercise 0: Review\n#Part a How many, or roughly what percent, of the 3000+ counties did the Republican candidate win in 2020?\nTake a guess.\n*43%\nThen make a plot of the winner variable.\n\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  labs(x = \"winner in 2020\")\n\n\n\n\n\n\n\nThen discuss what follow-up questions you might have (and that our data might help us answer). * A follow up question I have is which counties voted republican (and how many?)\n##Exercise 1: Quantitative vs Quantitative Intuition Check\n\nggplot(elections, aes(x = repub_pct_16, y = repub_pct_20)) +\n  geom_point() \n\n\n\n\n\n\n\n#Exercise 2: 2 Quantitiative Variables\n\n# Set up the plotting frame\n# How does this differ than the frame for our histogram of repub_pct_20 alone?\n# This differs because now there are two categorical variables.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))\n\n\n\n\n\n\n\n\n# Add a layer of points for each county\n# Take note of the geom!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n\n\n\n\n\n\n# Change the shape of the points\n# What happens if you change the shape to another number? \n# Changing the number changes the shapes of the data points\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 5)\n\n\n\n\n\n\n\n\n# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(color = \"orange\")\n\n\n\n\n\n\n\n\n# Add a layer that represents each county by the state it's in\n# Take note of the geom and the info it needs to run!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_text(aes(label = state_abbr))\n\n\n\n\n\n\n\n##Exercise 3: Reflect *There is a strong postive relationship between republicican support in 2016 and the same in 2020.\n##Exercise 4: Visualizing trend",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html",
    "href": "ica/ica-multi.html",
    "title": "\n8  Mulivariate Viz\n",
    "section": "",
    "text": "Use this file for practice with the mulivariate viz in-class activity. Refer to the class website for details.\n\n# Import and check out data\neducation &lt;- read.csv(\"https://mac-stat.github.io/data/sat.csv\")\nhead(education)\n\n       State expend ratio salary frac verbal math  sat  fracCat\n1    Alabama  4.405  17.2 31.144    8    491  538 1029   (0,15]\n2     Alaska  8.963  17.6 47.951   47    445  489  934 (45,100]\n3    Arizona  4.778  19.3 32.175   27    448  496  944  (15,45]\n4   Arkansas  4.459  17.1 28.934    6    482  523 1005   (0,15]\n5 California  4.992  24.0 41.078   45    417  485  902  (15,45]\n6   Colorado  5.443  18.4 34.571   29    462  518  980  (15,45]\n\nlibrary(ggplot2)\n\n##Exercise 1: SAT scores #Part a: Construct a plot of how the average sat scores vary from state to state. (Just use 1 variable – sat not State!)\n\nggplot(education, aes(x = sat)) +\n  geom_histogram()  \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n#Part b: Summarize your observations from the plot. Comment on the basics: range, typical outcomes, shape. (Any theories about what might explain this non-normal shape?)\n\n#scores around 900 are the most common. \n#scores on the extremes are the least common\n\n##Exercise 2: SAT Scores vs Per Pupil Spending & SAT Scores vs Salaries #Part a\n\n# Construct a plot of sat vs expend\n# Include a \"best fit linear regression model\" (HINT: method = \"lm\")\n\nggplot(education, aes(y = sat, x = expend)) +\n  geom_point() + \ngeom_smooth(method = \"lm\", se = FALSE) \n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n#Part b: What are the relationship trends between SAT scores and spending? Is there anything that surprises you?\n\n#I am suprised that score goes down as expenditure increases.\n\n##Exercise 3: SAT Scores vs Per Pupil Spending and Teacher Salaries #Construct one visualization of the relationship of sat with salary and expend. HINT: Start with just 2 variables and tweak that code to add the third variable. Try out a few things!\n\n#expend and SAT\nggplot(education, aes(y = sat, x = expend)) +\n  geom_point() \n\n\n\n\n\n\n#expend, SAT, and salary\nggplot(education, aes(y = sat, x = expend, size = salary)) +\n  geom_point() \n\n\n\n\n\n\n\n##Exercise 4: Another way to Incorporate Scale #It can be tough to distinguish color scales and size scales for quantitative variables. Another option is to discretize a quantitative variable, or basically cut it up into categories. #Construct the plot below. Check out the code and think about what’s happening here. What happens if you change “2” to “3”?\n\nggplot(education, aes(y = sat, x = salary, color = cut(expend, 2))) + \n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n#When we change 2 to 3, the data gets cut into 3 different sections instead of 2\n\n##Exercise 5: Finally an Explanation #Part a: Build a univariate viz of fracCat to better understand how many states fall into each category, fracCat.\n\nggplot(education, aes(x = fracCat )) +\n  geom_bar()  \n\n\n\n\n\n\n\n#Part b: Build 2 bivariate visualizations that demonstrate the relationship between sat and fracCat. What story does your graphic tell and why does this make contextual sense?\n\n#in both, fracCat varies by color\n#histogram\nggplot(education, aes(x = sat, fill = fracCat)) + \n  geom_histogram(position = \"fill\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 18 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n#density \nggplot(education, aes(x = sat, fill = fracCat)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html",
    "href": "ica/ica-spatial.html",
    "title": "\n9  Spatial Viz\n",
    "section": "",
    "text": "9.1 Exercise 3: Let’s start with the ggplot() tools we already know. Construct a scatterplot of all starbucks locations, not just those in Minnesota, with:\nLatitude and Longitude coordinates (which goes on the y-axis?!) Make the points transparent (alpha = 0.2) and smaller (size = 0.2)\nggplot(starbucks_mn, aes(y = Latitude, x = Longitude)) +\n  geom_point(alpha=0.2, size = 0.2)\n##Exercise 4: Exercise 4: Adding a country-level background. #Part a\n# Load the package\nlibrary(rnaturalearth)\n\n# Get info about country boundaries across the world\n# in a \"sf\" or simple feature format\nworld_boundaries &lt;- ne_countries(returnclass = \"sf\")\n#Part b\n# What does this code produce?\n  #This code produces a world map\n# What geom are we using for the point map?\nggplot(world_boundaries) + \n  geom_sf()\n\n\n\n\n\n\n  #We are using geom simple feature\n# Load package needed to change map theme\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\n\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\n\n\nAttaching package: 'mosaic'\n\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\n# Add a point for each Starbucks\n# NOTE: The Starbucks info is in our starbucks data, not world_boundaries\n# How does this change how we use geom_point?!\nggplot(world_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3, size = 0.2, color = \"darkgreen\"\n  ) +\n  theme_map()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n#Part c: Summarize what you learned about Starbucks from this map – *I learned that Starbucks are concentrated in the northern hemisphere of the continent, with a few expception in Asia and Oceania.\n##Exercise 5: Zooming in on some countries #Part a\n# We'll learn this syntax soon! Don't worry about it now.\nstarbucks_cma &lt;- starbucks |&gt; \n  filter(Country %in% c('CA', 'MX', 'US'))\ncma_boundaries &lt;- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n# Just the boundaries\nggplot(cma_boundaries) + \n  geom_sf()\n# Add the points\n# And zoom in\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50)) +\n  theme_map()\n##Exercise 6: A state and county-level map #Part a\nstarbucks_midwest &lt;- starbucks |&gt; \n  filter(State.Province %in% c(\"MN\", \"ND\", \"SD\", \"WI\"))\n# Load packages\nlibrary(sf)\nlibrary(maps)\n\n# Get the boundaries\nmidwest_boundaries &lt;- st_as_sf(\n  maps::map(\"county\",\n            region = c(\"minnesota\", \"wisconsin\", \"north dakota\", \"south dakota\"), \n            fill = TRUE, plot = FALSE))\n\n# Check it out\nhead(midwest_boundaries)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.81268 ymin: 45.05167 xmax: -93.01397 ymax: 48.53526\nGeodetic CRS:  +proj=longlat +ellps=clrk66 +no_defs +type=crs\n                                     ID                           geom\nminnesota,aitkin       minnesota,aitkin MULTIPOLYGON (((-93.03689 4...\nminnesota,anoka         minnesota,anoka MULTIPOLYGON (((-93.51817 4...\nminnesota,becker       minnesota,becker MULTIPOLYGON (((-95.14537 4...\nminnesota,beltrami   minnesota,beltrami MULTIPOLYGON (((-95.58655 4...\nminnesota,benton       minnesota,benton MULTIPOLYGON (((-93.77027 4...\nminnesota,big stone minnesota,big stone MULTIPOLYGON (((-96.10794 4...",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html",
    "href": "ica/ica-effective.html",
    "title": "\n10  ica-effective\n",
    "section": "",
    "text": "##Exercise 1: Professionalism\n\n# Load tidyverse package for plotting and wrangling\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(gplots)\n\n\nAttaching package: 'gplots'\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\n# Import the data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))\n\n\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point()\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n#Part a\n\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() + \n  labs(x = \"Temperture at 9 a.m.\", y = \"Temperature at 3 p.m.\", title = \"Temperature at 9 a.m. vs Temperature at 3 p.m.\", color = \"Cities in Austrailia\")  \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n#Part b\n\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() + \n  labs(x = \"Temperture at 9 a.m.\", y = \"Temperture at 3 p.m.\", color = \"Cities in Austrailia\")  \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nTemperature at 9 a.m. vs Temperature at 3 p.m.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>ica-effective</span>"
    ]
  }
]